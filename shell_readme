Readme File for the shell by Kush Banbah

How to compile the file:
The shell can be run on any server running linux with g++ and gdb

run the command: g++ main.cpp -o main
This command compiles the file and creates an executable main
To run the executable: ./main


---The command list of the program---
1)fg
2)bg
3)list
4)cont
5)kill
6)help
7)exit



1)fg [filename and path to the executable file] [arguements for the file]

This command runs an executable process in the foreground, during this the shell cannot accept commands and any input will be entered into the buffer and ran after the process has finished. The foreground process can be stopped with Ctrl-Z or terminated with Ctrl-C.

2)bg [file name and path to the execuatable file] [arguments for the file]

This command runs an executable process in the background, during this the shell can accept and run commands, even if the sh> doesn't show due to the output of the background file printing to terminal. You cannot stop background processes, but can kill them. They can be monitored with list

3)list

This command shows you all the running and stopped processes. It shows the pid, status and the file name with arguments.

4)cont [pid]

This command can allow you to continue a stopped processes, enter cont then pid to run it. The pid must be for a child processes that is stopped. They can be displayed with the command list. The programs will run in the foreground and the shell will behave like it does with every foreground process.

5)kill [pid]

This command allows you to kill a running background process, enter kill followed by the pid. The pid must be from a running background process. These can be displayed with the list command. This will cause the program to terminate immediately and exit unsucessfully

6)help

This command displays all the possible commands and tips about them

7)exit

This command kills all the running and stopped processes at the time and exits the shell after clearing all the child processes.



--Sample messages from the shell----
Possible messages from the shell

1)Process 2091 has completed normally : means that the program has sucessfully finished and ended normally
2)Process 2096 has ended not normally : means the program was unable to sucessfully finish and had some errors
3)Process 2236 has been terminated forcefully : means the process was forcefully terminated by the user using ctrl+c shortcut
4)Process 2231 has been stopped : means the foreground process has been forcefully stopped
5)Process 2231 has been continued : means a previously stopped process has been continued
6)Process 2231 has been ended : means a process was forcefully ended because the user exited the shell
7)Error: Command not found or no characters entered, type help to learn about commands : no command or a single letter was entered
8)Error: Did not enter any pid! : did not enter any input for the kill or cont command
9)Error: Process is already running or not found! : did not find a valid pid for the cont command
10)Error: Process is not found or is stopped! : did not find a valid pid for the kill command
11)Error: {input} is not a command, type help to learn about commands : input was not a command
12)Error: File could not be found or arguments had some error : File could not be found or arguments had a mistake
13)Error: Too many arguments! : The number of arguments exceeded 20, maximum allowed
14)Error: No file name argument found : Only fg or bg were entered without a file name
15)Error: Fork could not be created : Fork creation failed
16)Maximun number of programs reached, kill or wait for a program to finish! : The shell has reached maximun number of programs, please kill a process or wait for one to end before running another process.

----Demo-----

fg process demo:
sh >fg ./test test2 2 2
test2
test2
Process 2263 has completed normally
sh >

The first line was entered by the user and the rest are generated by either ./test file or the shell.
Any input given during the running of the foreground process will be executed after the foreground process is finished


bg process demo:
sh >bg ./test test2 4 2
sh >list
Process 2285:./useme test2 4 2  status: Running
sh >test2
test2
Process 2285 has completed normally
list
No processes are currently running or stopped
sh >

The first line command and the list command was entered by the user. The shell was able to run the list command even though the process was running because it was a background process

List demo:
sh >bg ./test test2 10 10
sh >fg ./test test2 2 2
^ZProcess 2301 has been stopped
sh >list
Process 2300:./test test2 10 10  status: Running
Process 2301:./test test2 2 2  status: Stopped

A background process was run and then a foreground process. The foreground process was stopped afterwards and both could be seen with the list process.

cont demo:
fg ./test test2 2 2
^ZProcess 2315 has been stopped
sh >cont 2315
Process 2315 has been continued
test2
test2
Process 2315 has completed normally
sh >

An foreground process was ran in the first line then it was stopped with the ctrl-Z shortcut
the cont command was used to continue the process then it ended normally. When a process is continued, it is treated as a foreground process, it can be stopped again and restarted again. The shell will also not receive commands till it ends, or is stopped.

Kill demo:
sh >bg ./test test2 4 4
sh >list
Process 2351:./test test2 4 4  status: Running
sh> test2
sh >kill 2351
sh >Process 2351 has ended not normally 

A background process was created and running. It was able to output but was forcefully killed with the kill command.

Exit demo:
Welcome to the shell, type help to see commands
sh >bg ./test back1 20 20
sh >bg ./test back2 20 20
sh >fg ./test test2 3 3
^ZProcess 2380 has been stopped
sh >list
Process 2378:./test back1 20 20  status: Running
Process 2379:./test back2 20 20  status: Running
Process 2380:./test test2 3 3  status: Stopped
sh >exit
Process 2378 has been ended
Process 2379 has been ended
Process 2380 has been ended

Before the shell exits, the shell forcefully ends all running and stopped processes with the displayed sample output. In this example two background processes and one stopped foreground process were ended forcefully by the shell.





